import { Request, Response } from 'express';
import WhatsAppService from '../services/whatsappService';
import '../middleware/auth'; // Para incluir a extens√£o do Request

interface SendMessageRequest {
    sessionId: string;
    phoneNumber: string;
    message: string;
}

class MessageController {
    private whatsappService: WhatsAppService;

    constructor() {
        this.whatsappService = WhatsAppService.getInstance();
    }

    // Enviar mensagem atrav√©s de uma sess√£o espec√≠fica
    public sendMessage = async (req: Request, res: Response): Promise<void> => {
        try {
            const { sessionId, phoneNumber, message } = req.body as SendMessageRequest;
            const user = req.user;

            console.log(`üì§ Tentativa de envio - SessionID: ${sessionId}, Phone: ${phoneNumber}, User: ${user?.email || 'n√£o logado'}`);

            // Valida√ß√µes b√°sicas
            if (!user) {
                res.status(401).json({ 
                    error: 'Autentica√ß√£o requerida',
                    message: 'Fa√ßa login para enviar mensagens'
                });
                return;
            }

            if (!sessionId || !phoneNumber || !message) {
                res.status(400).json({ 
                    error: 'Dados obrigat√≥rios n√£o fornecidos',
                    required: { 
                        sessionId: 'string', 
                        phoneNumber: 'string', 
                        message: 'string' 
                    }
                });
                return;
            }

            // Verificar se a sess√£o existe
            if (!this.whatsappService.sessionExists(sessionId)) {
                console.log(`‚ùå Sess√£o '${sessionId}' n√£o encontrada`);
                res.status(404).json({ 
                    error: `Sess√£o '${sessionId}' n√£o encontrada` 
                });
                return;
            }

            // Verificar se a sess√£o pertence ao usu√°rio
            const session = this.whatsappService.findSession(sessionId);
            if (session && session.userId !== user.uid) {
                console.log(`‚ùå Acesso negado - User: ${user.email}, Session Owner: ${session.userEmail}`);
                res.status(403).json({ 
                    error: 'Acesso negado',
                    message: 'Voc√™ s√≥ pode enviar mensagens atrav√©s das suas pr√≥prias sess√µes'
                });
                return;
            }

            // Verificar se a sess√£o est√° ativa/conectada
            const sessionStatus = this.whatsappService.getSessionStatus(sessionId);
            if (!sessionStatus.isActive) {
                console.log(`‚ùå Sess√£o '${sessionId}' n√£o est√° ativa`);
                res.status(400).json({ 
                    error: 'Sess√£o n√£o est√° ativa',
                    message: 'A sess√£o precisa estar conectada ao WhatsApp para enviar mensagens',
                    sessionStatus
                });
                return;
            }

            if (sessionStatus.status !== 'connected') {
                console.log(`‚ùå Sess√£o '${sessionId}' n√£o est√° conectada - Status: ${sessionStatus.status}`);
                res.status(400).json({ 
                    error: 'Sess√£o n√£o est√° conectada',
                    message: 'A sess√£o precisa estar autenticada no WhatsApp para enviar mensagens',
                    sessionStatus
                });
                return;
            }

            // Enviar mensagem
            const result = await this.whatsappService.sendMessage(sessionId, phoneNumber, message);
            
            console.log(`‚úÖ Mensagem enviada - SessionID: ${sessionId}, Phone: ${phoneNumber}, User: ${user.email}`);

            res.json({
                success: true,
                message: 'Mensagem enviada com sucesso',
                data: {
                    sessionId,
                    phoneNumber,
                    messageLength: message.length,
                    sentAt: new Date(),
                    sentBy: user.email,
                    messageId: result.id || 'unknown'
                }
            });

        } catch (error: any) {
            console.error('Erro ao enviar mensagem:', error);
            
            // Tratar erros espec√≠ficos do WhatsApp
            if (error.message.includes('not authenticated') || error.message.includes('not connected')) {
                res.status(400).json({ 
                    error: 'Sess√£o n√£o autenticada',
                    message: 'A sess√£o WhatsApp n√£o est√° autenticada. Escaneie o QR code primeiro.',
                    details: error.message 
                });
                return;
            }

            if (error.message.includes('Invalid number') || error.message.includes('not a valid number')) {
                res.status(400).json({ 
                    error: 'N√∫mero de telefone inv√°lido',
                    message: 'O n√∫mero fornecido n√£o √© v√°lido. Use o formato: 5511999999999',
                    details: error.message 
                });
                return;
            }

            res.status(500).json({ 
                error: 'Erro interno do servidor',
                message: 'Ocorreu um erro ao enviar a mensagem',
                details: error.message 
            });
        }
    };

    // Obter informa√ß√µes sobre uma sess√£o para envio
    public getSessionInfo = (req: Request, res: Response): void => {
        const { sessionId } = req.params;
        const user = req.user;

        if (!user) {
            res.status(401).json({ 
                error: 'Autentica√ß√£o requerida',
                message: 'Fa√ßa login para ver informa√ß√µes da sess√£o'
            });
            return;
        }

        if (!sessionId) {
            res.status(400).json({ 
                error: 'SessionId √© obrigat√≥rio'
            });
            return;
        }

        const session = this.whatsappService.findSession(sessionId);
        if (!session) {
            res.status(404).json({ 
                error: `Sess√£o '${sessionId}' n√£o encontrada` 
            });
            return;
        }

        // Verificar se a sess√£o pertence ao usu√°rio
        if (session.userId !== user.uid) {
            res.status(403).json({ 
                error: 'Acesso negado',
                message: 'Voc√™ s√≥ pode ver informa√ß√µes das suas pr√≥prias sess√µes'
            });
            return;
        }

        const sessionStatus = this.whatsappService.getSessionStatus(sessionId);

        res.json({
            session: {
                id: session.id,
                name: session.name,
                createdAt: session.createdAt
            },
            status: sessionStatus,
            canSendMessages: sessionStatus.isActive && sessionStatus.status === 'connected',
            instructions: {
                ready: sessionStatus.status === 'connected' ? 'Sess√£o pronta para envio de mensagens' : null,
                qrPending: sessionStatus.status === 'waiting_qr' ? 'Escaneie o QR code para ativar a sess√£o' : null,
                disconnected: sessionStatus.status === 'disconnected' ? 'Sess√£o desconectada. Reinicie a sess√£o.' : null
            }
        });
    };
}

export default MessageController;
